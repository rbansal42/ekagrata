**Objective:** Remove all dummy data and ensure full CMS integration following these steps:

1. **Global Settings Setup**
- Create Strapi content type "GlobalSettings" (single type) with:
  - whatsapp_number (string, required)
  - default_whatsapp_message (text)
  - contact_email (email)
  - instagram_handle (string)
- Create API endpoint in `lib/strapi.ts`:
  ```typescript
  export async function getGlobalSettings(): Promise<StrapiResponse<any>> {
    return fetchAPI('global-setting');
  }
  ```

2. **WhatsApp Integration**
- Update HeroSection to use global settings:
  ```typescript
  const { data } = await getGlobalSettings();
  const whatsappLink = `https://wa.me/${data.attributes.whatsapp_number}`;
  ```
- Modify `formatWhatsAppLink` in `lib/strapi.ts` to accept global settings:
  ```typescript
  export function formatWhatsAppLink(product: Product, settings: any) {
    const number = product.attributes.whatsappNumber || settings.whatsapp_number;
    // ... rest of implementation
  }
  ```

3. **Contact Page CMS Data**
- Convert contact page to server component:
  ```typescript
  export default async function ContactPage() {
    const { data } = await getGlobalSettings();
    // Use data.attributes in JSX
  }
  ```

4. **Image Handling**
- Update `next.config.js` remote patterns:
  ```javascript
  remotePatterns: [
    {
      protocol: 'https',
      hostname: process.env.STRAPI_PRODUCTION_HOST,
    },
    // Keep localhost for development
    {
      protocol: 'http',
      hostname: 'localhost',
      port: '1337',
    }
  ]
  ```

5. **Content Models Verification**
- Ensure Strapi has these fields:
  - Product: whatsapp_number, custom_message
  - Artisan: specialization, bio (richtext)
  - GlobalSettings (single type)

6. **Deployment Prep**
- Add environment variables to Netlify:
  - NEXT_PUBLIC_STRAPI_URL
  - STRAPI_API_TOKEN
  - STRAPI_PRODUCTION_HOST

7. **Fallback Handling**
- Add default image fallback:
  ```typescript
  export function getStrapiMedia(url: string) {
    return url ? `${process.env.STRAPI_URL}${url}` : '/images/fallback-product.jpg';
  }
  ```

**Implementation Notes:**
- Use server components where possible for data fetching
- Add loading states for async operations
- Create TypeScript interfaces for all Strapi responses
- Test all CMS connections in both dev and production modes

**Additional Requirements:**
- Maintain mobile-first responsive design
- Ensure all glassmorphism effects remain consistent
- Keep Work Sans as primary font
- Implement proper error boundaries for CMS data failures
